// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lcts/market_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lcts/market_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MarketDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto() {
  protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lcts/market_data.proto");
  GOOGLE_CHECK(file != NULL);
  MarketDataMsg_descriptor_ = file->message_type(0);
  static const int MarketDataMsg_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, updatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, deltaopeninsterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, accvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, accturnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, askvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, avgpriceintick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, averageprice_),
  };
  MarketDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataMsg_descriptor_,
      MarketDataMsg::default_instance_,
      MarketDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataMsg));
  InstrumentInfo_descriptor_ = file->message_type(1);
  static const int InstrumentInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, pricetick_),
  };
  InstrumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentInfo_descriptor_,
      InstrumentInfo::default_instance_,
      InstrumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentInfo));
  InstrumentList_descriptor_ = file->message_type(2);
  static const int InstrumentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentList, lst_),
  };
  InstrumentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentList_descriptor_,
      InstrumentList::default_instance_,
      InstrumentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataMsg_descriptor_, &MarketDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentInfo_descriptor_, &InstrumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentList_descriptor_, &InstrumentList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto() {
  delete MarketDataMsg::default_instance_;
  delete MarketDataMsg_reflection_;
  delete InstrumentInfo::default_instance_;
  delete InstrumentInfo_reflection_;
  delete InstrumentList::default_instance_;
  delete InstrumentList_reflection_;
}

void protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026lcts/market_data.proto\"\243\004\n\rMarketDataM"
    "sg\022\020\n\006symbol\030\001 \002(\t:\000\022\024\n\nTradingDay\030\002 \002(\t"
    ":\000\022\024\n\nUpdateTime\030\003 \002(\t:\000\022\031\n\016UpdateMillis"
    "ec\030\004 \002(\005:\0010\022\024\n\tLastPrice\030\005 \002(\001:\0010\022\027\n\014Ope"
    "nInterest\030\006 \002(\001:\0010\022\035\n\022deltaOpenInsterest"
    "\030\007 \002(\005:\0010\022\032\n\017UpperLimitPrice\030\010 \002(\001:\0010\022\032\n"
    "\017LowerLimitPrice\030\t \002(\001:\0010\022\021\n\006Volume\030\n \002("
    "\005:\0010\022\024\n\taccVolume\030\013 \002(\005:\0010\022\023\n\010Turnover\030\014"
    " \002(\001:\0010\022\026\n\013accTurnover\030\r \002(\001:\0010\022\023\n\010AskPr"
    "ice\030\016 \002(\001:\0010\022\024\n\tAskVolume\030\017 \002(\005:\0010\022\023\n\010Bi"
    "dPrice\030\020 \002(\001:\0010\022\024\n\tBidVolume\030\021 \002(\005:\0010\022\031\n"
    "\016AvgPriceInTick\030\022 \002(\001:\0010\022\030\n\rPreClosePric"
    "e\030\023 \002(\001:\0010\022\035\n\022PreSettlementPrice\030\024 \002(\001:\001"
    "0\022\032\n\017PreOpenInterest\030\025 \002(\001:\0010\022\027\n\014Average"
    "Price\030\026 \002(\001:\0010\"8\n\016InstrumentInfo\022\020\n\006Symb"
    "ol\030\001 \002(\t:\000\022\024\n\tPriceTick\030\002 \002(\001:\0011\".\n\016Inst"
    "rumentList\022\034\n\003lst\030\001 \003(\0132\017.InstrumentInfo"
    "B\002H\001", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lcts/market_data.proto", &protobuf_RegisterTypes);
  MarketDataMsg::default_instance_ = new MarketDataMsg();
  InstrumentInfo::default_instance_ = new InstrumentInfo();
  InstrumentList::default_instance_ = new InstrumentList();
  MarketDataMsg::default_instance_->InitAsDefaultInstance();
  InstrumentInfo::default_instance_->InitAsDefaultInstance();
  InstrumentList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lcts_2fmarket_5fdata_2eproto {
  StaticDescriptorInitializer_lcts_2fmarket_5fdata_2eproto() {
    protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  }
} static_descriptor_initializer_lcts_2fmarket_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarketDataMsg::kSymbolFieldNumber;
const int MarketDataMsg::kTradingDayFieldNumber;
const int MarketDataMsg::kUpdateTimeFieldNumber;
const int MarketDataMsg::kUpdateMillisecFieldNumber;
const int MarketDataMsg::kLastPriceFieldNumber;
const int MarketDataMsg::kOpenInterestFieldNumber;
const int MarketDataMsg::kDeltaOpenInsterestFieldNumber;
const int MarketDataMsg::kUpperLimitPriceFieldNumber;
const int MarketDataMsg::kLowerLimitPriceFieldNumber;
const int MarketDataMsg::kVolumeFieldNumber;
const int MarketDataMsg::kAccVolumeFieldNumber;
const int MarketDataMsg::kTurnoverFieldNumber;
const int MarketDataMsg::kAccTurnoverFieldNumber;
const int MarketDataMsg::kAskPriceFieldNumber;
const int MarketDataMsg::kAskVolumeFieldNumber;
const int MarketDataMsg::kBidPriceFieldNumber;
const int MarketDataMsg::kBidVolumeFieldNumber;
const int MarketDataMsg::kAvgPriceInTickFieldNumber;
const int MarketDataMsg::kPreClosePriceFieldNumber;
const int MarketDataMsg::kPreSettlementPriceFieldNumber;
const int MarketDataMsg::kPreOpenInterestFieldNumber;
const int MarketDataMsg::kAveragePriceFieldNumber;
#endif  // !_MSC_VER

MarketDataMsg::MarketDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataMsg::InitAsDefaultInstance() {
}

MarketDataMsg::MarketDataMsg(const MarketDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataMsg::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatemillisec_ = 0;
  lastprice_ = 0;
  openinterest_ = 0;
  deltaopeninsterest_ = 0;
  upperlimitprice_ = 0;
  lowerlimitprice_ = 0;
  volume_ = 0;
  accvolume_ = 0;
  turnover_ = 0;
  accturnover_ = 0;
  askprice_ = 0;
  askvolume_ = 0;
  bidprice_ = 0;
  bidvolume_ = 0;
  avgpriceintick_ = 0;
  precloseprice_ = 0;
  presettlementprice_ = 0;
  preopeninterest_ = 0;
  averageprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataMsg::~MarketDataMsg() {
  SharedDtor();
}

void MarketDataMsg::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataMsg_descriptor_;
}

const MarketDataMsg& MarketDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  return *default_instance_;
}

MarketDataMsg* MarketDataMsg::default_instance_ = NULL;

MarketDataMsg* MarketDataMsg::New() const {
  return new MarketDataMsg;
}

void MarketDataMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    updatemillisec_ = 0;
    lastprice_ = 0;
    openinterest_ = 0;
    deltaopeninsterest_ = 0;
    upperlimitprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lowerlimitprice_ = 0;
    volume_ = 0;
    accvolume_ = 0;
    turnover_ = 0;
    accturnover_ = 0;
    askprice_ = 0;
    askvolume_ = 0;
    bidprice_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bidvolume_ = 0;
    avgpriceintick_ = 0;
    precloseprice_ = 0;
    presettlementprice_ = 0;
    preopeninterest_ = 0;
    averageprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TradingDay;
        break;
      }

      // required string TradingDay = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UpdateTime;
        break;
      }

      // required string UpdateTime = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UpdateMillisec;
        break;
      }

      // required int32 UpdateMillisec = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatemillisec_)));
          set_has_updatemillisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_LastPrice;
        break;
      }

      // required double LastPrice = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_OpenInterest;
        break;
      }

      // required double OpenInterest = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_deltaOpenInsterest;
        break;
      }

      // required int32 deltaOpenInsterest = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deltaOpenInsterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deltaopeninsterest_)));
          set_has_deltaopeninsterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_UpperLimitPrice;
        break;
      }

      // required double UpperLimitPrice = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_LowerLimitPrice;
        break;
      }

      // required double LowerLimitPrice = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LowerLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Volume;
        break;
      }

      // required int32 Volume = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_accVolume;
        break;
      }

      // required int32 accVolume = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accvolume_)));
          set_has_accvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_Turnover;
        break;
      }

      // required double Turnover = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_accTurnover;
        break;
      }

      // required double accTurnover = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accTurnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accturnover_)));
          set_has_accturnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_AskPrice;
        break;
      }

      // required double AskPrice = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
          set_has_askprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_AskVolume;
        break;
      }

      // required int32 AskVolume = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume_)));
          set_has_askvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_BidPrice;
        break;
      }

      // required double BidPrice = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_BidVolume;
        break;
      }

      // required int32 BidVolume = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume_)));
          set_has_bidvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_AvgPriceInTick;
        break;
      }

      // required double AvgPriceInTick = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AvgPriceInTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgpriceintick_)));
          set_has_avgpriceintick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PreClosePrice;
        break;
      }

      // required double PreClosePrice = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
          set_has_precloseprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_PreSettlementPrice;
        break;
      }

      // required double PreSettlementPrice = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_PreOpenInterest;
        break;
      }

      // required double PreOpenInterest = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_AveragePrice;
        break;
      }

      // required double AveragePrice = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1 [default = ""];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required string TradingDay = 2 [default = ""];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tradingday(), output);
  }

  // required string UpdateTime = 3 [default = ""];
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->updatetime(), output);
  }

  // required int32 UpdateMillisec = 4 [default = 0];
  if (has_updatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->updatemillisec(), output);
  }

  // required double LastPrice = 5 [default = 0];
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastprice(), output);
  }

  // required double OpenInterest = 6 [default = 0];
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->openinterest(), output);
  }

  // required int32 deltaOpenInsterest = 7 [default = 0];
  if (has_deltaopeninsterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deltaopeninsterest(), output);
  }

  // required double UpperLimitPrice = 8 [default = 0];
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->upperlimitprice(), output);
  }

  // required double LowerLimitPrice = 9 [default = 0];
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lowerlimitprice(), output);
  }

  // required int32 Volume = 10 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volume(), output);
  }

  // required int32 accVolume = 11 [default = 0];
  if (has_accvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->accvolume(), output);
  }

  // required double Turnover = 12 [default = 0];
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->turnover(), output);
  }

  // required double accTurnover = 13 [default = 0];
  if (has_accturnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->accturnover(), output);
  }

  // required double AskPrice = 14 [default = 0];
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->askprice(), output);
  }

  // required int32 AskVolume = 15 [default = 0];
  if (has_askvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->askvolume(), output);
  }

  // required double BidPrice = 16 [default = 0];
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidprice(), output);
  }

  // required int32 BidVolume = 17 [default = 0];
  if (has_bidvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bidvolume(), output);
  }

  // required double AvgPriceInTick = 18 [default = 0];
  if (has_avgpriceintick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->avgpriceintick(), output);
  }

  // required double PreClosePrice = 19 [default = 0];
  if (has_precloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->precloseprice(), output);
  }

  // required double PreSettlementPrice = 20 [default = 0];
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->presettlementprice(), output);
  }

  // required double PreOpenInterest = 21 [default = 0];
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->preopeninterest(), output);
  }

  // required double AveragePrice = 22 [default = 0];
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->averageprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1 [default = ""];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required string TradingDay = 2 [default = ""];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradingday(), target);
  }

  // required string UpdateTime = 3 [default = ""];
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->updatetime(), target);
  }

  // required int32 UpdateMillisec = 4 [default = 0];
  if (has_updatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->updatemillisec(), target);
  }

  // required double LastPrice = 5 [default = 0];
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastprice(), target);
  }

  // required double OpenInterest = 6 [default = 0];
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->openinterest(), target);
  }

  // required int32 deltaOpenInsterest = 7 [default = 0];
  if (has_deltaopeninsterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deltaopeninsterest(), target);
  }

  // required double UpperLimitPrice = 8 [default = 0];
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->upperlimitprice(), target);
  }

  // required double LowerLimitPrice = 9 [default = 0];
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lowerlimitprice(), target);
  }

  // required int32 Volume = 10 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volume(), target);
  }

  // required int32 accVolume = 11 [default = 0];
  if (has_accvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->accvolume(), target);
  }

  // required double Turnover = 12 [default = 0];
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->turnover(), target);
  }

  // required double accTurnover = 13 [default = 0];
  if (has_accturnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->accturnover(), target);
  }

  // required double AskPrice = 14 [default = 0];
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->askprice(), target);
  }

  // required int32 AskVolume = 15 [default = 0];
  if (has_askvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->askvolume(), target);
  }

  // required double BidPrice = 16 [default = 0];
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidprice(), target);
  }

  // required int32 BidVolume = 17 [default = 0];
  if (has_bidvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bidvolume(), target);
  }

  // required double AvgPriceInTick = 18 [default = 0];
  if (has_avgpriceintick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->avgpriceintick(), target);
  }

  // required double PreClosePrice = 19 [default = 0];
  if (has_precloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->precloseprice(), target);
  }

  // required double PreSettlementPrice = 20 [default = 0];
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->presettlementprice(), target);
  }

  // required double PreOpenInterest = 21 [default = 0];
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->preopeninterest(), target);
  }

  // required double AveragePrice = 22 [default = 0];
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->averageprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1 [default = ""];
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required string TradingDay = 2 [default = ""];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required string UpdateTime = 3 [default = ""];
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // required int32 UpdateMillisec = 4 [default = 0];
    if (has_updatemillisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatemillisec());
    }

    // required double LastPrice = 5 [default = 0];
    if (has_lastprice()) {
      total_size += 1 + 8;
    }

    // required double OpenInterest = 6 [default = 0];
    if (has_openinterest()) {
      total_size += 1 + 8;
    }

    // required int32 deltaOpenInsterest = 7 [default = 0];
    if (has_deltaopeninsterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deltaopeninsterest());
    }

    // required double UpperLimitPrice = 8 [default = 0];
    if (has_upperlimitprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double LowerLimitPrice = 9 [default = 0];
    if (has_lowerlimitprice()) {
      total_size += 1 + 8;
    }

    // required int32 Volume = 10 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // required int32 accVolume = 11 [default = 0];
    if (has_accvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accvolume());
    }

    // required double Turnover = 12 [default = 0];
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // required double accTurnover = 13 [default = 0];
    if (has_accturnover()) {
      total_size += 1 + 8;
    }

    // required double AskPrice = 14 [default = 0];
    if (has_askprice()) {
      total_size += 1 + 8;
    }

    // required int32 AskVolume = 15 [default = 0];
    if (has_askvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume());
    }

    // required double BidPrice = 16 [default = 0];
    if (has_bidprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 BidVolume = 17 [default = 0];
    if (has_bidvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume());
    }

    // required double AvgPriceInTick = 18 [default = 0];
    if (has_avgpriceintick()) {
      total_size += 2 + 8;
    }

    // required double PreClosePrice = 19 [default = 0];
    if (has_precloseprice()) {
      total_size += 2 + 8;
    }

    // required double PreSettlementPrice = 20 [default = 0];
    if (has_presettlementprice()) {
      total_size += 2 + 8;
    }

    // required double PreOpenInterest = 21 [default = 0];
    if (has_preopeninterest()) {
      total_size += 2 + 8;
    }

    // required double AveragePrice = 22 [default = 0];
    if (has_averageprice()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataMsg::MergeFrom(const MarketDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updatemillisec()) {
      set_updatemillisec(from.updatemillisec());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_deltaopeninsterest()) {
      set_deltaopeninsterest(from.deltaopeninsterest());
    }
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_accvolume()) {
      set_accvolume(from.accvolume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_accturnover()) {
      set_accturnover(from.accturnover());
    }
    if (from.has_askprice()) {
      set_askprice(from.askprice());
    }
    if (from.has_askvolume()) {
      set_askvolume(from.askvolume());
    }
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bidvolume()) {
      set_bidvolume(from.bidvolume());
    }
    if (from.has_avgpriceintick()) {
      set_avgpriceintick(from.avgpriceintick());
    }
    if (from.has_precloseprice()) {
      set_precloseprice(from.precloseprice());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataMsg::CopyFrom(const MarketDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void MarketDataMsg::Swap(MarketDataMsg* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updatemillisec_, other->updatemillisec_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(deltaopeninsterest_, other->deltaopeninsterest_);
    std::swap(upperlimitprice_, other->upperlimitprice_);
    std::swap(lowerlimitprice_, other->lowerlimitprice_);
    std::swap(volume_, other->volume_);
    std::swap(accvolume_, other->accvolume_);
    std::swap(turnover_, other->turnover_);
    std::swap(accturnover_, other->accturnover_);
    std::swap(askprice_, other->askprice_);
    std::swap(askvolume_, other->askvolume_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(bidvolume_, other->bidvolume_);
    std::swap(avgpriceintick_, other->avgpriceintick_);
    std::swap(precloseprice_, other->precloseprice_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataMsg_descriptor_;
  metadata.reflection = MarketDataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentInfo::kSymbolFieldNumber;
const int InstrumentInfo::kPriceTickFieldNumber;
#endif  // !_MSC_VER

InstrumentInfo::InstrumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentInfo::InitAsDefaultInstance() {
}

InstrumentInfo::InstrumentInfo(const InstrumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentInfo::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricetick_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentInfo::~InstrumentInfo() {
  SharedDtor();
}

void InstrumentInfo::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void InstrumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentInfo_descriptor_;
}

const InstrumentInfo& InstrumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  return *default_instance_;
}

InstrumentInfo* InstrumentInfo::default_instance_ = NULL;

InstrumentInfo* InstrumentInfo::New() const {
  return new InstrumentInfo;
}

void InstrumentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    pricetick_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Symbol = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_PriceTick;
        break;
      }

      // required double PriceTick = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Symbol = 1 [default = ""];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required double PriceTick = 2 [default = 1];
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pricetick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Symbol = 1 [default = ""];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required double PriceTick = 2 [default = 1];
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pricetick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Symbol = 1 [default = ""];
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required double PriceTick = 2 [default = 1];
    if (has_pricetick()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentInfo::MergeFrom(const InstrumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentInfo::CopyFrom(const InstrumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InstrumentInfo::Swap(InstrumentInfo* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentInfo_descriptor_;
  metadata.reflection = InstrumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentList::kLstFieldNumber;
#endif  // !_MSC_VER

InstrumentList::InstrumentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentList::InitAsDefaultInstance() {
}

InstrumentList::InstrumentList(const InstrumentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentList::~InstrumentList() {
  SharedDtor();
}

void InstrumentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentList_descriptor_;
}

const InstrumentList& InstrumentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  return *default_instance_;
}

InstrumentList* InstrumentList::default_instance_ = NULL;

InstrumentList* InstrumentList::New() const {
  return new InstrumentList;
}

void InstrumentList::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .InstrumentInfo lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .InstrumentInfo lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .InstrumentInfo lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentList::ByteSize() const {
  int total_size = 0;

  // repeated .InstrumentInfo lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentList::MergeFrom(const InstrumentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentList::CopyFrom(const InstrumentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentList::IsInitialized() const {

  for (int i = 0; i < lst_size(); i++) {
    if (!this->lst(i).IsInitialized()) return false;
  }
  return true;
}

void InstrumentList::Swap(InstrumentList* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentList_descriptor_;
  metadata.reflection = InstrumentList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
