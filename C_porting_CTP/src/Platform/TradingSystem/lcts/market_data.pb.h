// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lcts/market_data.proto

#ifndef PROTOBUF_lcts_2fmarket_5fdata_2eproto__INCLUDED
#define PROTOBUF_lcts_2fmarket_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
void protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto();
void protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto();

class MarketDataMsg;
class InstrumentInfo;
class InstrumentList;

// ===================================================================

class MarketDataMsg : public ::google::protobuf::Message {
 public:
  MarketDataMsg();
  virtual ~MarketDataMsg();

  MarketDataMsg(const MarketDataMsg& from);

  inline MarketDataMsg& operator=(const MarketDataMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDataMsg& default_instance();

  void Swap(MarketDataMsg* other);

  // implements Message ----------------------------------------------

  MarketDataMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketDataMsg& from);
  void MergeFrom(const MarketDataMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1 [default = ""];
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required string TradingDay = 2 [default = ""];
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingDayFieldNumber = 2;
  inline const ::std::string& tradingday() const;
  inline void set_tradingday(const ::std::string& value);
  inline void set_tradingday(const char* value);
  inline void set_tradingday(const char* value, size_t size);
  inline ::std::string* mutable_tradingday();
  inline ::std::string* release_tradingday();
  inline void set_allocated_tradingday(::std::string* tradingday);

  // required string UpdateTime = 3 [default = ""];
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // required int32 UpdateMillisec = 4 [default = 0];
  inline bool has_updatemillisec() const;
  inline void clear_updatemillisec();
  static const int kUpdateMillisecFieldNumber = 4;
  inline ::google::protobuf::int32 updatemillisec() const;
  inline void set_updatemillisec(::google::protobuf::int32 value);

  // required double LastPrice = 5 [default = 0];
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 5;
  inline double lastprice() const;
  inline void set_lastprice(double value);

  // required double OpenInterest = 6 [default = 0];
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpenInterestFieldNumber = 6;
  inline double openinterest() const;
  inline void set_openinterest(double value);

  // required int32 deltaOpenInsterest = 7 [default = 0];
  inline bool has_deltaopeninsterest() const;
  inline void clear_deltaopeninsterest();
  static const int kDeltaOpenInsterestFieldNumber = 7;
  inline ::google::protobuf::int32 deltaopeninsterest() const;
  inline void set_deltaopeninsterest(::google::protobuf::int32 value);

  // required double UpperLimitPrice = 8 [default = 0];
  inline bool has_upperlimitprice() const;
  inline void clear_upperlimitprice();
  static const int kUpperLimitPriceFieldNumber = 8;
  inline double upperlimitprice() const;
  inline void set_upperlimitprice(double value);

  // required double LowerLimitPrice = 9 [default = 0];
  inline bool has_lowerlimitprice() const;
  inline void clear_lowerlimitprice();
  static const int kLowerLimitPriceFieldNumber = 9;
  inline double lowerlimitprice() const;
  inline void set_lowerlimitprice(double value);

  // required int32 Volume = 10 [default = 0];
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 10;
  inline ::google::protobuf::int32 volume() const;
  inline void set_volume(::google::protobuf::int32 value);

  // required int32 accVolume = 11 [default = 0];
  inline bool has_accvolume() const;
  inline void clear_accvolume();
  static const int kAccVolumeFieldNumber = 11;
  inline ::google::protobuf::int32 accvolume() const;
  inline void set_accvolume(::google::protobuf::int32 value);

  // required double Turnover = 12 [default = 0];
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  inline double turnover() const;
  inline void set_turnover(double value);

  // required double accTurnover = 13 [default = 0];
  inline bool has_accturnover() const;
  inline void clear_accturnover();
  static const int kAccTurnoverFieldNumber = 13;
  inline double accturnover() const;
  inline void set_accturnover(double value);

  // required double AskPrice = 14 [default = 0];
  inline bool has_askprice() const;
  inline void clear_askprice();
  static const int kAskPriceFieldNumber = 14;
  inline double askprice() const;
  inline void set_askprice(double value);

  // required int32 AskVolume = 15 [default = 0];
  inline bool has_askvolume() const;
  inline void clear_askvolume();
  static const int kAskVolumeFieldNumber = 15;
  inline ::google::protobuf::int32 askvolume() const;
  inline void set_askvolume(::google::protobuf::int32 value);

  // required double BidPrice = 16 [default = 0];
  inline bool has_bidprice() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 16;
  inline double bidprice() const;
  inline void set_bidprice(double value);

  // required int32 BidVolume = 17 [default = 0];
  inline bool has_bidvolume() const;
  inline void clear_bidvolume();
  static const int kBidVolumeFieldNumber = 17;
  inline ::google::protobuf::int32 bidvolume() const;
  inline void set_bidvolume(::google::protobuf::int32 value);

  // required double AvgPriceInTick = 18 [default = 0];
  inline bool has_avgpriceintick() const;
  inline void clear_avgpriceintick();
  static const int kAvgPriceInTickFieldNumber = 18;
  inline double avgpriceintick() const;
  inline void set_avgpriceintick(double value);

  // required double PreClosePrice = 19 [default = 0];
  inline bool has_precloseprice() const;
  inline void clear_precloseprice();
  static const int kPreClosePriceFieldNumber = 19;
  inline double precloseprice() const;
  inline void set_precloseprice(double value);

  // required double PreSettlementPrice = 20 [default = 0];
  inline bool has_presettlementprice() const;
  inline void clear_presettlementprice();
  static const int kPreSettlementPriceFieldNumber = 20;
  inline double presettlementprice() const;
  inline void set_presettlementprice(double value);

  // required double PreOpenInterest = 21 [default = 0];
  inline bool has_preopeninterest() const;
  inline void clear_preopeninterest();
  static const int kPreOpenInterestFieldNumber = 21;
  inline double preopeninterest() const;
  inline void set_preopeninterest(double value);

  // required double AveragePrice = 22 [default = 0];
  inline bool has_averageprice() const;
  inline void clear_averageprice();
  static const int kAveragePriceFieldNumber = 22;
  inline double averageprice() const;
  inline void set_averageprice(double value);

  // @@protoc_insertion_point(class_scope:MarketDataMsg)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_updatemillisec();
  inline void clear_has_updatemillisec();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_deltaopeninsterest();
  inline void clear_has_deltaopeninsterest();
  inline void set_has_upperlimitprice();
  inline void clear_has_upperlimitprice();
  inline void set_has_lowerlimitprice();
  inline void clear_has_lowerlimitprice();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_accvolume();
  inline void clear_has_accvolume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_accturnover();
  inline void clear_has_accturnover();
  inline void set_has_askprice();
  inline void clear_has_askprice();
  inline void set_has_askvolume();
  inline void clear_has_askvolume();
  inline void set_has_bidprice();
  inline void clear_has_bidprice();
  inline void set_has_bidvolume();
  inline void clear_has_bidvolume();
  inline void set_has_avgpriceintick();
  inline void clear_has_avgpriceintick();
  inline void set_has_precloseprice();
  inline void clear_has_precloseprice();
  inline void set_has_presettlementprice();
  inline void clear_has_presettlementprice();
  inline void set_has_preopeninterest();
  inline void clear_has_preopeninterest();
  inline void set_has_averageprice();
  inline void clear_has_averageprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::std::string* tradingday_;
  ::std::string* updatetime_;
  double lastprice_;
  ::google::protobuf::int32 updatemillisec_;
  ::google::protobuf::int32 deltaopeninsterest_;
  double openinterest_;
  double upperlimitprice_;
  double lowerlimitprice_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 accvolume_;
  double turnover_;
  double accturnover_;
  double askprice_;
  double bidprice_;
  ::google::protobuf::int32 askvolume_;
  ::google::protobuf::int32 bidvolume_;
  double avgpriceintick_;
  double precloseprice_;
  double presettlementprice_;
  double preopeninterest_;
  double averageprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto();

  void InitAsDefaultInstance();
  static MarketDataMsg* default_instance_;
};
// -------------------------------------------------------------------

class InstrumentInfo : public ::google::protobuf::Message {
 public:
  InstrumentInfo();
  virtual ~InstrumentInfo();

  InstrumentInfo(const InstrumentInfo& from);

  inline InstrumentInfo& operator=(const InstrumentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentInfo& default_instance();

  void Swap(InstrumentInfo* other);

  // implements Message ----------------------------------------------

  InstrumentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrumentInfo& from);
  void MergeFrom(const InstrumentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Symbol = 1 [default = ""];
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required double PriceTick = 2 [default = 1];
  inline bool has_pricetick() const;
  inline void clear_pricetick();
  static const int kPriceTickFieldNumber = 2;
  inline double pricetick() const;
  inline void set_pricetick(double value);

  // @@protoc_insertion_point(class_scope:InstrumentInfo)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_pricetick();
  inline void clear_has_pricetick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  double pricetick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto();

  void InitAsDefaultInstance();
  static InstrumentInfo* default_instance_;
};
// -------------------------------------------------------------------

class InstrumentList : public ::google::protobuf::Message {
 public:
  InstrumentList();
  virtual ~InstrumentList();

  InstrumentList(const InstrumentList& from);

  inline InstrumentList& operator=(const InstrumentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstrumentList& default_instance();

  void Swap(InstrumentList* other);

  // implements Message ----------------------------------------------

  InstrumentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstrumentList& from);
  void MergeFrom(const InstrumentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .InstrumentInfo lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::InstrumentInfo& lst(int index) const;
  inline ::InstrumentInfo* mutable_lst(int index);
  inline ::InstrumentInfo* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::InstrumentInfo >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::InstrumentInfo >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:InstrumentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::InstrumentInfo > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_AssignDesc_lcts_2fmarket_5fdata_2eproto();
  friend void protobuf_ShutdownFile_lcts_2fmarket_5fdata_2eproto();

  void InitAsDefaultInstance();
  static InstrumentList* default_instance_;
};
// ===================================================================


// ===================================================================

// MarketDataMsg

// required string symbol = 1 [default = ""];
inline bool MarketDataMsg::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketDataMsg::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketDataMsg::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketDataMsg::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& MarketDataMsg::symbol() const {
  return *symbol_;
}
inline void MarketDataMsg::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketDataMsg::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketDataMsg::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketDataMsg::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* MarketDataMsg::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketDataMsg::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TradingDay = 2 [default = ""];
inline bool MarketDataMsg::has_tradingday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketDataMsg::set_has_tradingday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketDataMsg::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketDataMsg::clear_tradingday() {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    tradingday_->clear();
  }
  clear_has_tradingday();
}
inline const ::std::string& MarketDataMsg::tradingday() const {
  return *tradingday_;
}
inline void MarketDataMsg::set_tradingday(const ::std::string& value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void MarketDataMsg::set_tradingday(const char* value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void MarketDataMsg::set_tradingday(const char* value, size_t size) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketDataMsg::mutable_tradingday() {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  return tradingday_;
}
inline ::std::string* MarketDataMsg::release_tradingday() {
  clear_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradingday_;
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketDataMsg::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (tradingday) {
    set_has_tradingday();
    tradingday_ = tradingday;
  } else {
    clear_has_tradingday();
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string UpdateTime = 3 [default = ""];
inline bool MarketDataMsg::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketDataMsg::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketDataMsg::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketDataMsg::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& MarketDataMsg::updatetime() const {
  return *updatetime_;
}
inline void MarketDataMsg::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void MarketDataMsg::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void MarketDataMsg::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketDataMsg::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* MarketDataMsg::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketDataMsg::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 UpdateMillisec = 4 [default = 0];
inline bool MarketDataMsg::has_updatemillisec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketDataMsg::set_has_updatemillisec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketDataMsg::clear_has_updatemillisec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketDataMsg::clear_updatemillisec() {
  updatemillisec_ = 0;
  clear_has_updatemillisec();
}
inline ::google::protobuf::int32 MarketDataMsg::updatemillisec() const {
  return updatemillisec_;
}
inline void MarketDataMsg::set_updatemillisec(::google::protobuf::int32 value) {
  set_has_updatemillisec();
  updatemillisec_ = value;
}

// required double LastPrice = 5 [default = 0];
inline bool MarketDataMsg::has_lastprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketDataMsg::set_has_lastprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketDataMsg::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketDataMsg::clear_lastprice() {
  lastprice_ = 0;
  clear_has_lastprice();
}
inline double MarketDataMsg::lastprice() const {
  return lastprice_;
}
inline void MarketDataMsg::set_lastprice(double value) {
  set_has_lastprice();
  lastprice_ = value;
}

// required double OpenInterest = 6 [default = 0];
inline bool MarketDataMsg::has_openinterest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketDataMsg::set_has_openinterest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketDataMsg::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketDataMsg::clear_openinterest() {
  openinterest_ = 0;
  clear_has_openinterest();
}
inline double MarketDataMsg::openinterest() const {
  return openinterest_;
}
inline void MarketDataMsg::set_openinterest(double value) {
  set_has_openinterest();
  openinterest_ = value;
}

// required int32 deltaOpenInsterest = 7 [default = 0];
inline bool MarketDataMsg::has_deltaopeninsterest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketDataMsg::set_has_deltaopeninsterest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketDataMsg::clear_has_deltaopeninsterest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketDataMsg::clear_deltaopeninsterest() {
  deltaopeninsterest_ = 0;
  clear_has_deltaopeninsterest();
}
inline ::google::protobuf::int32 MarketDataMsg::deltaopeninsterest() const {
  return deltaopeninsterest_;
}
inline void MarketDataMsg::set_deltaopeninsterest(::google::protobuf::int32 value) {
  set_has_deltaopeninsterest();
  deltaopeninsterest_ = value;
}

// required double UpperLimitPrice = 8 [default = 0];
inline bool MarketDataMsg::has_upperlimitprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketDataMsg::set_has_upperlimitprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketDataMsg::clear_has_upperlimitprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketDataMsg::clear_upperlimitprice() {
  upperlimitprice_ = 0;
  clear_has_upperlimitprice();
}
inline double MarketDataMsg::upperlimitprice() const {
  return upperlimitprice_;
}
inline void MarketDataMsg::set_upperlimitprice(double value) {
  set_has_upperlimitprice();
  upperlimitprice_ = value;
}

// required double LowerLimitPrice = 9 [default = 0];
inline bool MarketDataMsg::has_lowerlimitprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketDataMsg::set_has_lowerlimitprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarketDataMsg::clear_has_lowerlimitprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarketDataMsg::clear_lowerlimitprice() {
  lowerlimitprice_ = 0;
  clear_has_lowerlimitprice();
}
inline double MarketDataMsg::lowerlimitprice() const {
  return lowerlimitprice_;
}
inline void MarketDataMsg::set_lowerlimitprice(double value) {
  set_has_lowerlimitprice();
  lowerlimitprice_ = value;
}

// required int32 Volume = 10 [default = 0];
inline bool MarketDataMsg::has_volume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketDataMsg::set_has_volume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarketDataMsg::clear_has_volume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarketDataMsg::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 MarketDataMsg::volume() const {
  return volume_;
}
inline void MarketDataMsg::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
}

// required int32 accVolume = 11 [default = 0];
inline bool MarketDataMsg::has_accvolume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarketDataMsg::set_has_accvolume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarketDataMsg::clear_has_accvolume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarketDataMsg::clear_accvolume() {
  accvolume_ = 0;
  clear_has_accvolume();
}
inline ::google::protobuf::int32 MarketDataMsg::accvolume() const {
  return accvolume_;
}
inline void MarketDataMsg::set_accvolume(::google::protobuf::int32 value) {
  set_has_accvolume();
  accvolume_ = value;
}

// required double Turnover = 12 [default = 0];
inline bool MarketDataMsg::has_turnover() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarketDataMsg::set_has_turnover() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MarketDataMsg::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MarketDataMsg::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double MarketDataMsg::turnover() const {
  return turnover_;
}
inline void MarketDataMsg::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// required double accTurnover = 13 [default = 0];
inline bool MarketDataMsg::has_accturnover() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MarketDataMsg::set_has_accturnover() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MarketDataMsg::clear_has_accturnover() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MarketDataMsg::clear_accturnover() {
  accturnover_ = 0;
  clear_has_accturnover();
}
inline double MarketDataMsg::accturnover() const {
  return accturnover_;
}
inline void MarketDataMsg::set_accturnover(double value) {
  set_has_accturnover();
  accturnover_ = value;
}

// required double AskPrice = 14 [default = 0];
inline bool MarketDataMsg::has_askprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MarketDataMsg::set_has_askprice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MarketDataMsg::clear_has_askprice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MarketDataMsg::clear_askprice() {
  askprice_ = 0;
  clear_has_askprice();
}
inline double MarketDataMsg::askprice() const {
  return askprice_;
}
inline void MarketDataMsg::set_askprice(double value) {
  set_has_askprice();
  askprice_ = value;
}

// required int32 AskVolume = 15 [default = 0];
inline bool MarketDataMsg::has_askvolume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MarketDataMsg::set_has_askvolume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MarketDataMsg::clear_has_askvolume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MarketDataMsg::clear_askvolume() {
  askvolume_ = 0;
  clear_has_askvolume();
}
inline ::google::protobuf::int32 MarketDataMsg::askvolume() const {
  return askvolume_;
}
inline void MarketDataMsg::set_askvolume(::google::protobuf::int32 value) {
  set_has_askvolume();
  askvolume_ = value;
}

// required double BidPrice = 16 [default = 0];
inline bool MarketDataMsg::has_bidprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarketDataMsg::set_has_bidprice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MarketDataMsg::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MarketDataMsg::clear_bidprice() {
  bidprice_ = 0;
  clear_has_bidprice();
}
inline double MarketDataMsg::bidprice() const {
  return bidprice_;
}
inline void MarketDataMsg::set_bidprice(double value) {
  set_has_bidprice();
  bidprice_ = value;
}

// required int32 BidVolume = 17 [default = 0];
inline bool MarketDataMsg::has_bidvolume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarketDataMsg::set_has_bidvolume() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MarketDataMsg::clear_has_bidvolume() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MarketDataMsg::clear_bidvolume() {
  bidvolume_ = 0;
  clear_has_bidvolume();
}
inline ::google::protobuf::int32 MarketDataMsg::bidvolume() const {
  return bidvolume_;
}
inline void MarketDataMsg::set_bidvolume(::google::protobuf::int32 value) {
  set_has_bidvolume();
  bidvolume_ = value;
}

// required double AvgPriceInTick = 18 [default = 0];
inline bool MarketDataMsg::has_avgpriceintick() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarketDataMsg::set_has_avgpriceintick() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MarketDataMsg::clear_has_avgpriceintick() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MarketDataMsg::clear_avgpriceintick() {
  avgpriceintick_ = 0;
  clear_has_avgpriceintick();
}
inline double MarketDataMsg::avgpriceintick() const {
  return avgpriceintick_;
}
inline void MarketDataMsg::set_avgpriceintick(double value) {
  set_has_avgpriceintick();
  avgpriceintick_ = value;
}

// required double PreClosePrice = 19 [default = 0];
inline bool MarketDataMsg::has_precloseprice() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MarketDataMsg::set_has_precloseprice() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MarketDataMsg::clear_has_precloseprice() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MarketDataMsg::clear_precloseprice() {
  precloseprice_ = 0;
  clear_has_precloseprice();
}
inline double MarketDataMsg::precloseprice() const {
  return precloseprice_;
}
inline void MarketDataMsg::set_precloseprice(double value) {
  set_has_precloseprice();
  precloseprice_ = value;
}

// required double PreSettlementPrice = 20 [default = 0];
inline bool MarketDataMsg::has_presettlementprice() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MarketDataMsg::set_has_presettlementprice() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MarketDataMsg::clear_has_presettlementprice() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MarketDataMsg::clear_presettlementprice() {
  presettlementprice_ = 0;
  clear_has_presettlementprice();
}
inline double MarketDataMsg::presettlementprice() const {
  return presettlementprice_;
}
inline void MarketDataMsg::set_presettlementprice(double value) {
  set_has_presettlementprice();
  presettlementprice_ = value;
}

// required double PreOpenInterest = 21 [default = 0];
inline bool MarketDataMsg::has_preopeninterest() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MarketDataMsg::set_has_preopeninterest() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MarketDataMsg::clear_has_preopeninterest() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MarketDataMsg::clear_preopeninterest() {
  preopeninterest_ = 0;
  clear_has_preopeninterest();
}
inline double MarketDataMsg::preopeninterest() const {
  return preopeninterest_;
}
inline void MarketDataMsg::set_preopeninterest(double value) {
  set_has_preopeninterest();
  preopeninterest_ = value;
}

// required double AveragePrice = 22 [default = 0];
inline bool MarketDataMsg::has_averageprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MarketDataMsg::set_has_averageprice() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MarketDataMsg::clear_has_averageprice() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MarketDataMsg::clear_averageprice() {
  averageprice_ = 0;
  clear_has_averageprice();
}
inline double MarketDataMsg::averageprice() const {
  return averageprice_;
}
inline void MarketDataMsg::set_averageprice(double value) {
  set_has_averageprice();
  averageprice_ = value;
}

// -------------------------------------------------------------------

// InstrumentInfo

// required string Symbol = 1 [default = ""];
inline bool InstrumentInfo::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstrumentInfo::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstrumentInfo::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstrumentInfo::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& InstrumentInfo::symbol() const {
  return *symbol_;
}
inline void InstrumentInfo::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void InstrumentInfo::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void InstrumentInfo::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstrumentInfo::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* InstrumentInfo::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InstrumentInfo::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double PriceTick = 2 [default = 1];
inline bool InstrumentInfo::has_pricetick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstrumentInfo::set_has_pricetick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstrumentInfo::clear_has_pricetick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstrumentInfo::clear_pricetick() {
  pricetick_ = 1;
  clear_has_pricetick();
}
inline double InstrumentInfo::pricetick() const {
  return pricetick_;
}
inline void InstrumentInfo::set_pricetick(double value) {
  set_has_pricetick();
  pricetick_ = value;
}

// -------------------------------------------------------------------

// InstrumentList

// repeated .InstrumentInfo lst = 1;
inline int InstrumentList::lst_size() const {
  return lst_.size();
}
inline void InstrumentList::clear_lst() {
  lst_.Clear();
}
inline const ::InstrumentInfo& InstrumentList::lst(int index) const {
  return lst_.Get(index);
}
inline ::InstrumentInfo* InstrumentList::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::InstrumentInfo* InstrumentList::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InstrumentInfo >&
InstrumentList::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::InstrumentInfo >*
InstrumentList::mutable_lst() {
  return &lst_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lcts_2fmarket_5fdata_2eproto__INCLUDED
