// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LogInfo {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_LogInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::LogInfo, global::LogInfo.Builder> internal__static_LogInfo__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LogInfo() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNsY3RzL2xvZ19pbmZvLnByb3RvIicKB0xvZ0luZm8SCwoDcHJpGAEgAigF", 
          "Eg8KB2xvZ19zdHIYAiACKAlCAkgB"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_LogInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_LogInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::LogInfo, global::LogInfo.Builder>(internal__static_LogInfo__Descriptor,
                new string[] { "Pri", "LogStr", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LogInfo : pb::GeneratedMessage<LogInfo, LogInfo.Builder> {
  private LogInfo() { }
  private static readonly LogInfo defaultInstance = new LogInfo().MakeReadOnly();
  private static readonly string[] _logInfoFieldNames = new string[] { "log_str", "pri" };
  private static readonly uint[] _logInfoFieldTags = new uint[] { 18, 8 };
  public static LogInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LogInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LogInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.LogInfo.internal__static_LogInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LogInfo, LogInfo.Builder> InternalFieldAccessors {
    get { return global::Proto.LogInfo.internal__static_LogInfo__FieldAccessorTable; }
  }
  
  public const int PriFieldNumber = 1;
  private bool hasPri;
  private int pri_;
  public bool HasPri {
    get { return hasPri; }
  }
  public int Pri {
    get { return pri_; }
  }
  
  public const int LogStrFieldNumber = 2;
  private bool hasLogStr;
  private string logStr_ = "";
  public bool HasLogStr {
    get { return hasLogStr; }
  }
  public string LogStr {
    get { return logStr_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPri) return false;
      if (!hasLogStr) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _logInfoFieldNames;
    if (hasPri) {
      output.WriteInt32(1, field_names[1], Pri);
    }
    if (hasLogStr) {
      output.WriteString(2, field_names[0], LogStr);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPri) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Pri);
    }
    if (hasLogStr) {
      size += pb::CodedOutputStream.ComputeStringSize(2, LogStr);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LogInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LogInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LogInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LogInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LogInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LogInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LogInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LogInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LogInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LogInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LogInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LogInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LogInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LogInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LogInfo result;
    
    private LogInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        LogInfo original = result;
        result = new LogInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LogInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LogInfo.Descriptor; }
    }
    
    public override LogInfo DefaultInstanceForType {
      get { return global::LogInfo.DefaultInstance; }
    }
    
    public override LogInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LogInfo) {
        return MergeFrom((LogInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LogInfo other) {
      if (other == global::LogInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPri) {
        Pri = other.Pri;
      }
      if (other.HasLogStr) {
        LogStr = other.LogStr;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_logInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _logInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPri = input.ReadInt32(ref result.pri_);
            break;
          }
          case 18: {
            result.hasLogStr = input.ReadString(ref result.logStr_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPri {
      get { return result.hasPri; }
    }
    public int Pri {
      get { return result.Pri; }
      set { SetPri(value); }
    }
    public Builder SetPri(int value) {
      PrepareBuilder();
      result.hasPri = true;
      result.pri_ = value;
      return this;
    }
    public Builder ClearPri() {
      PrepareBuilder();
      result.hasPri = false;
      result.pri_ = 0;
      return this;
    }
    
    public bool HasLogStr {
      get { return result.hasLogStr; }
    }
    public string LogStr {
      get { return result.LogStr; }
      set { SetLogStr(value); }
    }
    public Builder SetLogStr(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLogStr = true;
      result.logStr_ = value;
      return this;
    }
    public Builder ClearLogStr() {
      PrepareBuilder();
      result.hasLogStr = false;
      result.logStr_ = "";
      return this;
    }
  }
  static LogInfo() {
    object.ReferenceEquals(global::Proto.LogInfo.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
